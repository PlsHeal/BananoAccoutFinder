import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  value: 'ban_1oi5fxzt1t5h9keckenq18j8raapo1njxqdtyyfmed846pph9s8fig7944py',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getAccount = createAsyncThunk(
  'counter/fetchCount',
  async (arg) => {
    const bananojs = require('@bananocoin/bananojs');
    bananojs.setBananodeApiUrl('https://kaliumapi.appditto.com/api');
    const crypto = require('crypto');
    const seed = crypto.randomBytes(32).toString('hex');
    const privateKey = bananojs.getPrivateKey(seed, 0);
    const publicKey = await bananojs.getPublicKey(privateKey);
    const account = bananojs.getBananoAccount(publicKey);

    if (arg) {
      return arg
    }

    return account;
  }
);


export const accountSlice = createSlice({
  name: 'account',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //Synchronous task unavailable
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAccount.pending, (state) => {
        state.status = 'loading';
        state.value = 'Loading...'
      })
      .addCase(getAccount.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectValue = (state) => state.account.value;

// We can also write thunks by hand, which may contain both sync and async logic.
export default accountSlice.reducer;
